
variables:
  duffleVersion: '0.1.0-ralpha.5%2Benglishrose'
  fatsDir: '$(system.defaultWorkingDirectory)/../fats'
  fatsRefspec: a875da0492680d255d8f7a10502550129b5c13f3 # projectriff/fats master as of 2019-06-06

jobs:
- job: build
  pool:
    vmImage: 'ubuntu-16.04'

  variables:
    CLUSTER: minikube
    REGISTRY: minikube
    CLUSTER_NAME: 'riff-$(Build.BuildId)-minikube'
    NAMESPACE: 'riff-$(Build.BuildId)-minikube'

  steps:
  - template: ci/fetch-fats-step.yml
  - template: ci/install-duffle-step.yml

  - script: duffle init && duffle build .
    displayName: 'build bundle'

  - bash: |
      $(fatsDir)/install.sh kubectl
      $(fatsDir)/install.sh minikube
      $(fatsDir)/install.sh riff
    displayName: 'install tools'

  - script: $(fatsDir)/start.sh
    displayName: 'install and start minikube'

  - script: |
      duffle credentials add ci/myk8s.yaml
      duffle install myriff riff --credentials myk8s
    displayName: 'duffle install'

  - bash: ./ci/run-tests.sh
    displayName: 'run fats'
    env:
      FATS_DIR: $(fatsDir)
      FATS_REFSPEC: $(fatsRefspec)

  - bash: ci/diagnostics.sh
    condition: failed()
    displayName: 'diagnostics'

  - bash: |
      $(fatsDir)/install.sh gcloud
      ./ci/publish-build.sh
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    env:
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
      BUILD_NUMBER: '$(Build.BuildNumber)'
    displayName: 'Publish riff cnab bundle'

  - template: ci/publish-docker-image-steps.yml

- job: test
  dependsOn: build
  strategy:
    matrix:
      minikube:
        imageName: ubuntu-16.04
        qualifier: minikube
        cluster: minikube
        registry: docker-daemon
      gke:
        imageName: ubuntu-16.04
        qualifier: gke
        cluster: gke
        registry: gcr
  pool:
    vmImage: $(imageName)
  variables:
    CLUSTER:  '$(cluster)'
    REGISTRY: '$(registry)'
    CLUSTER_NAME: 'riff-$(Build.BuildId)-$(qualifier)'
    NAMESPACE: '$(CLUSTER_NAME)'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  steps:
  - template: ci/fetch-fats-step.yml
  - template: ci/install-duffle-step.yml

  - bash: |
      $(fatsDir)/install.sh kubectl
      $(fatsDir)/install.sh minikube
      $(fatsDir)/install.sh riff
      $(fatsDir)/install.sh gcloud
    displayName: 'install tools'
    env:
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'

  - bash: source $(fatsDir)/start.sh
    displayName: 'setup cluster'
    env:
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'

  - bash: |
      version="`cat VERSION`-$(Build.BuildNumber)"
      file=riff-bundle-${version}.json
      curl -O https://storage.googleapis.com/projectriff/riff-cnab/builds/${file}
      duffle credentials add ci/myk8s.yaml
      duffle install myriff ${file} --bundle-is-file --credentials myk8s --insecure
    displayName: 'install riff from cnab bundle'
    env:
      COMPOSE_CONVERT_WINDOWS_PATHS: 1

  - bash: ./ci/run-tests.sh
    displayName: 'run fats'
    env:
      DOCKER_USERNAME: '$(DockerUsername)'
      DOCKER_PASSWORD: '$(DockerPassword)'
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
      FATS_DIR: $(fatsDir)
      FATS_REFSPEC: $(fatsRefspec)

  - bash: ci/diagnostics.sh
    condition: failed()
    displayName: 'diagnostics'

  - bash: |
      duffle uninstall myriff --credentials myk8s
      source $(fatsDir)/cleanup.sh
    env:
      DOCKER_USERNAME: '$(DockerUsername)'
      DOCKER_PASSWORD: '$(DockerPassword)'
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
    condition: always()
    displayName: 'Cleanup FATS'

- job: publish
  dependsOn: test
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - template: ci/fetch-fats-step.yml

  - bash: |
      $(fatsDir)/install.sh gcloud
      ./ci/publish.sh snapshot
    condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/master')
    env:
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
      BUILD_NUMBER: '$(Build.BuildNumber)'
    displayName: 'Publish riff cnab bundle'

  - bash: |
      $(fatsDir)/install.sh gcloud
      ./ci/publish.sh release
    condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/v')
    env:
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
    displayName: 'Publish riff cnab bundle'
